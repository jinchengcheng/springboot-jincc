spring:
  name: shiro
  messages:
    encoding: UTF-8
  banner:
    charset: UTF-8
  redis:
    database: 0
    host: 127.0.0.1
    password:
    port: 6388
  http:
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  profiles: #表示所用配置文件为application-dev.yml
    active: dev
  datasource:
    druid:
      #url: jdbc:mysql://127.0.0.1:3306/shiro?useUnicode=true&characterEncoding=utf8&useSSL=false
      #username: root
      #password: password
      #driver-class-name: com.mysql.jdbc.Driver
      #platform: mysql
      type: com.alibaba.druid.pool.DruidDataSource
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 1
      min-idle: 3
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      time-between-eviction-runs-millis: 60000
      validation-query: select 'x'
      time-between-eviction-runs-millis: 60000
      test-on-borrow: true
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;config.decrypt=true
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat: true
      #下面monitor配置，是可以打开druid监控，我这里从后台写的监控，方便知道这些属性如何注入的，查看DruidConfiguration
      #monitor:
        #enabled: enabled # 配置此属性Monitor才生效
        #druid-stat-view: /druid/*
        #druid-web-stat-filter: /*
        #IP白名单
        #allow: 219.230.50.107,127.0.0.1
        #IP黑名单(共同存在时，deny优先于allow)
        #deny: 219.230.50.108
        #控制台管理用户
        #login-username: admin
        #login-password: 123456
        #数据源1 业务数据
      bussDatasource:
        url: jdbc:mysql://127.0.0.1:3306/shiro?useUnicode=true&characterEncoding=utf8&useSSL=false
        username: root
        password: password
        driver-class-name: com.mysql.jdbc.Driver
        platform: mysql
      #shiro数据源，用于权限相关
      shiroDataSource:
        #MyISAM和InnoDB是两种最常用的数据库引擎，默认的引擎是MyISAM，性能最好，但不支持事务处理，只有InnoDB支持事务
        url: jdbc:mysql://127.0.0.1:3306/shiro?useUnicode=true&characterEncoding=utf8&useSSL=false
        username: root
        password: password
        driver-class-name: com.mysql.jdbc.Driver
        platform: mysql
mybatis:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:/shiroMapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.shiro.pojo
  configLocation: classpath:/config/mybatis-sqlconfig.xml
  globalConfig:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    idType: 3
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    fieldStrategy: 2
    #驼峰下划线转换
    dbColumnUnderline: true
    #刷新mapper 调试神器
    isRefresh: true
    #数据库大写下划线转换
    isCapitalMode: true
    # Sequence序列接口实现类配置
    keyGenerator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
    #逻辑删除配置（下面3个配置
    #logicDeleteValue 的值表示 数据库逻辑删除字段的值，假设0表示未删除，那这里配置1，
    #logicNotDeleteValue 表示的是未删除，默认值是0 ，同时逻辑删除的字段需要注解  @TableLogic）
    logicDeleteValue: 1
    logicNotDeleteValue: 0
    sqlInjector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    metaObjectHandler: com.shiro.MyMetaObjectHandler
  #configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    #map-underscore-to-camel-case: true
    #cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    #jdbc-type-for-null: 'null'
redis:
  shiro:
    host: 127.0.0.1
    port: 6388
    timeout: 0
    password:
    expire: 0  #这个尽量不要动，默认是0数据库
#logging:
#  pattern:
#    console: "%d - %msg%n"
#  file: logs/demo.log
#  level:
#    com.**: debug
#    com.alibaba.**: info,debug
logging:
  config: classpath:logging-spring.xml

